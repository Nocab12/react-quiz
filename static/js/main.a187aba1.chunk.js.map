{"version":3,"sources":["components/Navigation/MenuToggle/MenuToggle.js","components/UI/BackDrop/Backdrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswerList/AnswerList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["MenuToggle","props","cls","isOpen","push","className","join","onClick","onToggle","Backdrop","links","Drawer","map","link","index","key","href","this","Fragment","renderLinks","onClose","React","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswerItem","onAnswerClick","answer","id","text","AnswerList","answers","ActiveQuiz","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","successCount","Object","keys","results","reduce","total","quiz","quizItem","classes","length","onRetry","Quiz","result","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","console","log","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a187aba1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './MenuToggle.css'\r\n\r\nconst MenuToggle = props => {\r\n\r\n    const cls = [\r\n      'fa',\r\n      'menu-toggle'\r\n    ];\r\n\r\n    if (props.isOpen) {\r\n        cls.push('fa-times')\r\n        cls.push('open')\r\n    } else {\r\n        cls.push('fa-bars')\r\n    }\r\n\r\n    return (\r\n        <i\r\n        className={cls.join(' ')}\r\n        onClick={props.onToggle}\r\n        >\r\n\r\n        </i>\r\n    )\r\n};\r\n\r\nexport default MenuToggle;","import React from \"react\";\r\nimport './Backdrop.css'\r\n\r\nconst Backdrop = props => {\r\n    return (\r\n        <div className={\"backdrop\"} onClick={props.onClick}>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Backdrop","import React from \"react\";\r\nimport './Drawer.css';\r\nimport Backdrop from \"../../UI/BackDrop/Backdrop\";\r\n\r\nconst links = [1, 2, 3];\r\n\r\nclass Drawer extends React.Component {\r\n\r\n    renderLinks() {\r\n        return links.map((link, index) => {\r\n            return (\r\n                <li key={index}>\r\n                    <a href={'t'}>link {link}</a>\r\n\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const cls = [\"drawer\"]\r\n\r\n        if (!this.props.isOpen) {\r\n            cls.push(\"close\")\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <nav className={cls.join(\" \")}>\r\n                    <ul>\r\n                        { this.renderLinks() }\r\n                    </ul>\r\n                </nav>\r\n                { this.props.isOpen ? <Backdrop onClick={this.props.onClose} /> : null }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drawer","import React from 'react'\r\nimport './Layout.css'\r\nimport MenuToggle from \"../../components/Navigation/MenuToggle/MenuToggle\";\r\nimport Drawer from \"../../components/Navigation/Drawer/Drawer\";\r\n\r\nclass Layout extends React.Component{\r\n\r\n    state = {\r\n        menu: false\r\n    };\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    };\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({\r\n            menu: false\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"layout\">\r\n                <Drawer\r\n                    isOpen={this.state.menu}\r\n                    onClose={this.menuCloseHandler}\r\n                />\r\n                <MenuToggle\r\n                    onToggle={this.toggleMenuHandler}\r\n                    isOpen={this.state.menu}\r\n                />\r\n                <main>\r\n\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport './AnswerItem.css'\r\nconst AnswerItem = props => {\r\n\r\n    const cls = ['answer-item']\r\n\r\n    if (props.state) {\r\n        cls.push([props.state])\r\n    }\r\n\r\n    return (\r\n        <li className={cls.join(' ')} onClick={() => props.onAnswerClick(props.answer.id)}>\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default AnswerItem","import React from 'react'\r\nimport './AnswerList.css'\r\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\r\nconst AnswerList = props => {\r\n    return (\r\n        <ul className={\"answer-list\"}>\r\n            { props.answers.map((answer,index) => {\r\n                return (\r\n                    <AnswerItem\r\n                        key={index}\r\n                        answer={answer}\r\n                        onAnswerClick={props.onAnswerClick}\r\n                        state={props.state ? props.state[answer.id] : null}\r\n                    />\r\n\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default AnswerList","import React from 'react'\r\nimport './ActiveQuiz.css'\r\nimport AnswerList from \"./AnswerList/AnswerList\";\r\n\r\nconst ActiveQuiz = props => {\r\n\r\n    return (\r\n        <div className=\"active-quiz\">\r\n            <p className=\"question\">\r\n            <span>\r\n                <strong>{props.answerNumber}.</strong>&nbsp;\r\n                {props.question}\r\n            </span>\r\n                <small>\r\n                    {props.answerNumber} из {props.quizLength}\r\n                </small>\r\n            </p>\r\n            <AnswerList\r\n                state={props.state}\r\n                answers={props.answers}\r\n                onAnswerClick={props.onAnswerClick}\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n};\r\n\r\nexport default ActiveQuiz","import React from 'react'\nimport './Button.css'\n\nconst Button = props => {\n  const cls = [\n    'button',\n     props.type\n  ];\n\n  return (\n    <button\n      onClick={props.onClick}\n      className={cls.join(' ')}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  )\n};\n\nexport default Button","import React from \"react\";\r\nimport classes from './FinishedQuiz.css'\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nconst FinishedQuiz = props => {\r\n\r\n    const successCount = Object.keys(props.results).reduce((total, key) => {\r\n        if (props.results[key] === 'success') {\r\n            total++\r\n        }\r\n\r\n        return total\r\n    }, 0)\r\n\r\n    return (\r\n        <div className={\"finished-quiz\"}>\r\n            <ul>\r\n                {props.quiz.map((quizItem, index) => {\r\n                    const cls = [\r\n                        'fa',\r\n                        props.results[quizItem.id] === 'error' ? 'fa-times error' : 'fa-check success',\r\n                        classes[props.results[quizItem.id]]\r\n                    ]\r\n                    return (\r\n                        <li\r\n                            key={index}\r\n                        >\r\n                        <strong>{index + 1}</strong>.&nbsp;\r\n                            {quizItem.question}\r\n                            <i className={cls.join(' ')} />\r\n                        </li>\r\n                    )\r\n                }) }\r\n\r\n            </ul>\r\n            <p>Правильно {successCount} из {props.quiz.length}</p>\r\n            <div>\r\n\r\n                <Button onClick={props.onRetry} type={\"primary\"}>Повторить</Button>\r\n                <Button type={\"success\"}>Перейти в список тестов</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinishedQuiz","import React from 'react'\r\nimport './Quiz.css'\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\";\r\n\r\nclass Quiz extends React.Component {\r\n\r\n    state = {\r\n\r\n        result: {}, // {[id]: success or error}\r\n\r\n        isFinished: false,\r\n\r\n        activeQuestion: 0,\r\n\r\n        answerState: null,\r\n\r\n        quiz: [\r\n            {\r\n                question: 'Какого цвета небо',\r\n                rightAnswerId: 2,\r\n                id: 1,\r\n                answers: [\r\n                    {text: 'Черный', id: 1},\r\n                    {text: 'Синий', id: 2},\r\n                    {text: 'Красный', id: 3},\r\n                    {text: 'зеленый', id: 4}\r\n                ]\r\n            },\r\n            {\r\n                question: 'В каком году основали Санкт-Петербург?',\r\n                rightAnswerId: 3,\r\n                id: 2,\r\n                answers: [\r\n                    {text: '1700', id: 1},\r\n                    {text: '1702', id: 2},\r\n                    {text: '1703', id: 3},\r\n                    {text: '1803', id: 4}\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n        console.log(answerId) // При нажатии на пункт, срабатывает функция которая выдает answerId (это id правильного ответа)\r\n\r\n        if (this.state.answerState) {\r\n            const key = Object.keys(this.state.answerState)[0] // непонятная хрень\r\n            if (this.state.answerState[key] === 'success') {\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion]\r\n\r\n        const results = this.state.result\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n\r\n            if(!results[question.id]) {\r\n                results[question.id] = 'success'\r\n            }\r\n\r\n            this.setState({\r\n                answerState: {[answerId]: 'success'},\r\n                results: results\r\n\r\n            })\r\n\r\n            const timeout = window.setTimeout(() => {\r\n\r\n                if (this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    })\r\n                }\r\n\r\n                window.clearTimeout(timeout)  // Для того чтобы не было утечки памяти и таймаут убрался сразу после выполнения функции\r\n\r\n            }, 1000)\r\n\r\n\r\n        } else {\r\n\r\n            results[question.id] = 'error'\r\n\r\n            this.setState({\r\n                answerState: {[answerId]: 'error'},\r\n                results: results\r\n            })\r\n\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n    isQuizFinished() {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    retryHandler = () => {\r\n        this.setState({\r\n            result: {}, // {[id]: success or error}\r\n\r\n            isFinished: false,\r\n\r\n            activeQuestion: 0,\r\n\r\n            answerState: null,\r\n\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"quis\">\r\n                <div className=\"quiz-wrapper\">\r\n                    <h1>Ответьте на все вопросы</h1>\r\n\r\n                    {\r\n                        this.state.isFinished\r\n                            ?\r\n                            <FinishedQuiz\r\n                                results={this.state.result}\r\n                                quiz={this.state.quiz}\r\n                                onRetry={this.retryHandler}\r\n                            />\r\n                            :\r\n                            <ActiveQuiz\r\n                                question={this.state.quiz[this.state.activeQuestion].question}\r\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                                onAnswerClick={this.onAnswerClickHandler}\r\n                                quizLength={this.state.quiz.length}\r\n                                answerNumber={this.state.activeQuestion + 1}\r\n                                state={this.state.answerState}\r\n                            />\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz","import React from 'react';\nimport Layout from \"./hoc/Layout/Layout\";\nimport Quiz from \"./containers/Quiz/Quiz\";\n\nfunction App() {\n    return (\n        <Layout>\n            <Quiz>\n\n            </Quiz>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}